-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_TOP_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inreg_0_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inreg_0_1_ap_vld : OUT STD_LOGIC;
    inreg_1_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inreg_1_1_ap_vld : OUT STD_LOGIC;
    inreg_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inreg_0_ap_vld : OUT STD_LOGIC;
    inreg_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inreg_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of TOP_TOP_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal exitcond1952_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal phi_urem_fu_52 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal idx_urem_fu_164_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_urem_load : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_fu_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal next_mul_fu_132_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_phi_mul_load : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_fu_60 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal empty_107_fu_123_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_109_fu_138_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_t_fu_142_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_urem_fu_152_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_108_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((exitcond1952_fu_117_p2 = ap_const_lv1_0)) then 
                    empty_fu_60 <= empty_107_fu_123_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_60 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((exitcond1952_fu_117_p2 = ap_const_lv1_0)) then 
                    phi_mul_fu_56 <= next_mul_fu_132_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_56 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((exitcond1952_fu_117_p2 = ap_const_lv1_0)) then 
                    phi_urem_fu_52 <= idx_urem_fu_164_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_52 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, exitcond1952_fu_117_p2)
    begin
        if (((exitcond1952_fu_117_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, empty_fu_60)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_p_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, phi_mul_fu_56)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_phi_mul_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_phi_mul_load <= phi_mul_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_phi_urem_load_assign_proc : process(ap_CS_fsm_state1, phi_urem_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_phi_urem_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_phi_urem_load <= phi_urem_fu_52;
        end if; 
    end process;

    empty_107_fu_123_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_p_load) + unsigned(ap_const_lv6_1));
    empty_108_fu_158_p2 <= "1" when (unsigned(next_urem_fu_152_p2) < unsigned(ap_const_lv6_C)) else "0";
    empty_109_fu_138_p1 <= ap_sig_allocacmp_phi_urem_load(4 - 1 downto 0);
    exitcond1952_fu_117_p2 <= "1" when (ap_sig_allocacmp_p_load = ap_const_lv6_30) else "0";
    idx_urem_fu_164_p3 <= 
        next_urem_fu_152_p2 when (empty_108_fu_158_p2(0) = '1') else 
        ap_const_lv6_0;
    inreg_0 <= ap_const_lv64_0;
    inreg_0_1 <= ap_const_lv64_0;

    inreg_0_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, exitcond1952_fu_117_p2, empty_109_fu_138_p1, p_t_fu_142_p4)
    begin
        if (((p_t_fu_142_p4 = ap_const_lv2_0) and (empty_109_fu_138_p1 = ap_const_lv4_1) and (exitcond1952_fu_117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inreg_0_1_ap_vld <= ap_const_logic_1;
        else 
            inreg_0_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    inreg_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, exitcond1952_fu_117_p2, empty_109_fu_138_p1, p_t_fu_142_p4)
    begin
        if (((p_t_fu_142_p4 = ap_const_lv2_0) and (empty_109_fu_138_p1 = ap_const_lv4_0) and (exitcond1952_fu_117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inreg_0_ap_vld <= ap_const_logic_1;
        else 
            inreg_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    inreg_1 <= ap_const_lv64_0;
    inreg_1_1 <= ap_const_lv64_0;

    inreg_1_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, exitcond1952_fu_117_p2, empty_109_fu_138_p1, p_t_fu_142_p4)
    begin
        if (((p_t_fu_142_p4 = ap_const_lv2_1) and (empty_109_fu_138_p1 = ap_const_lv4_1) and (exitcond1952_fu_117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inreg_1_1_ap_vld <= ap_const_logic_1;
        else 
            inreg_1_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    inreg_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, exitcond1952_fu_117_p2, empty_109_fu_138_p1, p_t_fu_142_p4)
    begin
        if (((p_t_fu_142_p4 = ap_const_lv2_1) and (empty_109_fu_138_p1 = ap_const_lv4_0) and (exitcond1952_fu_117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inreg_1_ap_vld <= ap_const_logic_1;
        else 
            inreg_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_132_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv13_56));
    next_urem_fu_152_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_urem_load) + unsigned(ap_const_lv6_1));
    p_t_fu_142_p4 <= ap_sig_allocacmp_phi_mul_load(11 downto 10);
end behav;
