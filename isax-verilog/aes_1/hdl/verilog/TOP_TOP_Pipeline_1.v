// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module TOP_TOP_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ans_2_0,
        ans_1_0,
        ans_0_0,
        ans_2_1_out,
        ans_2_1_out_ap_vld,
        ans_1_1_out,
        ans_1_1_out_ap_vld,
        ans_0_1_out,
        ans_0_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ans_2_0;
input  [31:0] ans_1_0;
input  [31:0] ans_0_0;
output  [31:0] ans_2_1_out;
output   ans_2_1_out_ap_vld;
output  [31:0] ans_1_1_out;
output   ans_1_1_out_ap_vld;
output  [31:0] ans_0_1_out;
output   ans_0_1_out_ap_vld;

reg ap_idle;
reg ans_2_1_out_ap_vld;
reg ans_1_1_out_ap_vld;
reg ans_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] exitcond4_i2_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] p_t_fu_36;
wire   [1:0] empty_fu_120_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_p_t_load;
wire   [1:0] p_t_load_load_fu_111_p1;
reg   [31:0] ans_0_1_fu_40;
reg   [31:0] ans_1_1_fu_44;
reg   [31:0] ans_2_1_fu_48;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_76;
wire    ap_ce_reg;

// power-on initialization
initial begin
   ap_CS_fsm = 1'd1;
   p_t_fu_36 = 2'd0;
   ans_0_1_fu_40 = 32'd0;
   ans_1_1_fu_44 = 32'd0;
   ans_2_1_fu_48 = 32'd0;
   ap_done_reg = 1'b0;
end

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((p_t_load_load_fu_111_p1 == 2'd0) & (exitcond4_i2_fu_114_p2 == 1'd0))) begin
            ans_0_1_fu_40 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ans_0_1_fu_40 <= ans_0_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if (((p_t_load_load_fu_111_p1 == 2'd1) & (exitcond4_i2_fu_114_p2 == 1'd0))) begin
            ans_1_1_fu_44 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ans_1_1_fu_44 <= ans_1_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_76)) begin
            ans_2_1_fu_48 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            ans_2_1_fu_48 <= ans_2_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((exitcond4_i2_fu_114_p2 == 1'd0)) begin
            p_t_fu_36 <= empty_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            p_t_fu_36 <= 2'd0;
        end
    end
end

always @ (*) begin
    if (((exitcond4_i2_fu_114_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ans_0_1_out_ap_vld = 1'b1;
    end else begin
        ans_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_i2_fu_114_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ans_1_1_out_ap_vld = 1'b1;
    end else begin
        ans_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_i2_fu_114_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ans_2_1_out_ap_vld = 1'b1;
    end else begin
        ans_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_i2_fu_114_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_t_load = 2'd0;
    end else begin
        ap_sig_allocacmp_p_t_load = p_t_fu_36;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ans_0_1_out = ans_0_1_fu_40;

assign ans_1_1_out = ans_1_1_fu_44;

assign ans_2_1_out = ans_2_1_fu_48;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_76 = (~(p_t_load_load_fu_111_p1 == 2'd1) & ~(p_t_load_load_fu_111_p1 == 2'd0) & (exitcond4_i2_fu_114_p2 == 1'd0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_120_p2 = (ap_sig_allocacmp_p_t_load + 2'd1);

assign exitcond4_i2_fu_114_p2 = ((ap_sig_allocacmp_p_t_load == 2'd3) ? 1'b1 : 1'b0);

assign p_t_load_load_fu_111_p1 = ap_sig_allocacmp_p_t_load;

endmodule //TOP_TOP_Pipeline_1
