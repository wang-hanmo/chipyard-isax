-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_gmul_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ia : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of TOP_gmul_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv26_2010103 : STD_LOGIC_VECTOR (25 downto 0) := "10000000010000000100000011";
    constant ap_const_lv26_1030201 : STD_LOGIC_VECTOR (25 downto 0) := "01000000110000001000000001";
    constant ap_const_lv26_3020101 : STD_LOGIC_VECTOR (25 downto 0) := "11000000100000000100000001";
    constant ap_const_lv26_1010302 : STD_LOGIC_VECTOR (25 downto 0) := "01000000010000001100000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln49_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_16_fu_104_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_16_reg_589 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_90 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal j_2_fu_127_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal pans_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pans_1_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ib_fu_140_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ib_fu_140_p9 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln60_fu_160_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_fu_171_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_fu_174_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_2_fu_189_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_203_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_3_fu_195_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_228_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_17_fu_219_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_244_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_5_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_6_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_fu_282_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln65_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_7_fu_274_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_18_fu_306_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_331_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_9_fu_340_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_10_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln71_1_fu_369_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln65_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_11_fu_361_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_19_fu_393_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_418_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_13_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_14_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_15_fu_448_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_fu_211_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_6_fu_464_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_2_fu_298_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_164_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln74_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln74_1_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_5_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_3_fu_236_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_4_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln74_4_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln74_3_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_7_fu_410_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln74_5_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln74_2_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal oans_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_518_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_522_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_1_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln76_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ib_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ib_fu_140_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ib_fu_140_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component TOP_sparsemux_7_32_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (31 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (31 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (31 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        def : IN STD_LOGIC_VECTOR (25 downto 0);
        sel : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_7_32_26_1_1_U16 : component TOP_sparsemux_7_32_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000000000000000000000000000011",
        din0_WIDTH => 26,
        CASE1 => "00000000000000000000000000000001",
        din1_WIDTH => 26,
        CASE2 => "00000000000000000000000000000010",
        din2_WIDTH => 26,
        def_WIDTH => 26,
        sel_WIDTH => 32,
        dout_WIDTH => 26)
    port map (
        din0 => ap_const_lv26_2010103,
        din1 => ap_const_lv26_1030201,
        din2 => ap_const_lv26_3020101,
        def => ap_const_lv26_1010302,
        sel => ib_fu_140_p8,
        dout => ib_fu_140_p9);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    j_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_90 <= ap_const_lv3_0;
                elsif (((icmp_ln49_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_90 <= j_2_fu_127_p2;
                end if;
            end if; 
        end if;
    end process;

    pans_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pans_fu_94 <= ap_const_lv32_0;
                elsif (((icmp_ln49_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pans_fu_94 <= pans_1_fu_540_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_16_reg_589 <= a_16_fu_104_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_10_fu_355_p2 <= (ap_const_lv8_1B xor a_9_fu_340_p3);
    a_11_fu_361_p3 <= 
        a_10_fu_355_p2 when (tmp_8_fu_348_p3(0) = '1') else 
        a_9_fu_340_p3;
    a_13_fu_427_p3 <= (tmp_3_fu_418_p4 & ap_const_lv1_0);
    a_14_fu_442_p2 <= (ap_const_lv8_1B xor a_13_fu_427_p3);
    a_15_fu_448_p3 <= 
        a_14_fu_442_p2 when (tmp_10_fu_435_p3(0) = '1') else 
        a_13_fu_427_p3;
    a_16_fu_104_p1 <= ia(8 - 1 downto 0);
    a_17_fu_219_p4 <= ia(15 downto 8);
    a_18_fu_306_p4 <= ia(23 downto 16);
    a_19_fu_393_p4 <= ia(31 downto 24);
    a_2_fu_189_p2 <= (ap_const_lv8_1B xor a_fu_174_p3);
    a_3_fu_195_p3 <= 
        a_2_fu_189_p2 when (tmp_fu_182_p3(0) = '1') else 
        a_fu_174_p3;
    a_5_fu_253_p3 <= (tmp_1_fu_244_p4 & ap_const_lv1_0);
    a_6_fu_268_p2 <= (ap_const_lv8_1B xor a_5_fu_253_p3);
    a_7_fu_274_p3 <= 
        a_6_fu_268_p2 when (tmp_6_fu_261_p3(0) = '1') else 
        a_5_fu_253_p3;
    a_9_fu_340_p3 <= (tmp_2_fu_331_p4 & ap_const_lv1_0);
    a_fu_174_p3 <= (trunc_ln68_fu_171_p1 & ap_const_lv1_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln49_fu_121_p2)
    begin
        if (((icmp_ln49_fu_121_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= pans_fu_94;
    b_fu_402_p3 <= ib_fu_140_p9(24 downto 24);
    ib_fu_140_p8 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_90),32));
    icmp_ln49_fu_121_p2 <= "1" when (j_fu_90 = ap_const_lv3_4) else "0";
    icmp_ln65_1_fu_379_p2 <= "0" when (trunc_ln71_1_fu_369_p4 = ap_const_lv7_0) else "1";
    icmp_ln65_fu_292_p2 <= "0" when (trunc_ln1_fu_282_p4 = ap_const_lv7_0) else "1";
    j_2_fu_127_p2 <= std_logic_vector(unsigned(j_fu_90) + unsigned(ap_const_lv3_1));
    oans_fu_508_p2 <= (xor_ln74_5_fu_502_p2 xor xor_ln74_2_fu_484_p2);
    p_1_fu_164_p3 <= 
        a_16_reg_589 when (trunc_ln60_fu_160_p1(0) = '1') else 
        ap_const_lv8_0;
    p_3_fu_236_p3 <= 
        a_17_fu_219_p4 when (tmp_5_fu_228_p3(0) = '1') else 
        ap_const_lv8_0;
    p_5_fu_323_p3 <= 
        a_18_fu_306_p4 when (tmp_7_fu_315_p3(0) = '1') else 
        ap_const_lv8_0;
    p_7_fu_410_p3 <= 
        a_19_fu_393_p4 when (b_fu_402_p3(0) = '1') else 
        ap_const_lv8_0;
    pans_1_fu_540_p2 <= (shl_ln76_fu_534_p2 or pans_fu_94);
    select_ln65_2_fu_298_p3 <= 
        a_7_fu_274_p3 when (icmp_ln65_fu_292_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_4_fu_385_p3 <= 
        a_11_fu_361_p3 when (icmp_ln65_1_fu_379_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_6_fu_464_p3 <= 
        a_15_fu_448_p3 when (tmp_11_fu_456_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln65_fu_211_p3 <= 
        a_3_fu_195_p3 when (tmp_4_fu_203_p3(0) = '1') else 
        ap_const_lv8_0;
    shl_ln76_fu_534_p2 <= std_logic_vector(shift_left(unsigned(zext_ln76_fu_514_p1),to_integer(unsigned('0' & zext_ln76_1_fu_530_p1(31-1 downto 0)))));
    shl_ln_fu_522_p3 <= (trunc_ln76_fu_518_p1 & ap_const_lv3_0);
    tmp_10_fu_435_p3 <= ia(31 downto 31);
    tmp_11_fu_456_p3 <= ib_fu_140_p9(25 downto 25);
    tmp_1_fu_244_p4 <= ia(14 downto 8);
    tmp_2_fu_331_p4 <= ia(22 downto 16);
    tmp_3_fu_418_p4 <= ia(30 downto 24);
    tmp_4_fu_203_p3 <= ib_fu_140_p9(1 downto 1);
    tmp_5_fu_228_p3 <= ib_fu_140_p9(8 downto 8);
    tmp_6_fu_261_p3 <= ia(15 downto 15);
    tmp_7_fu_315_p3 <= ib_fu_140_p9(16 downto 16);
    tmp_8_fu_348_p3 <= ia(23 downto 23);
    tmp_fu_182_p3 <= ia(7 downto 7);
    trunc_ln1_fu_282_p4 <= ib_fu_140_p9(15 downto 9);
    trunc_ln60_fu_160_p1 <= ib_fu_140_p9(1 - 1 downto 0);
    trunc_ln68_fu_171_p1 <= ia(7 - 1 downto 0);
    trunc_ln71_1_fu_369_p4 <= ib_fu_140_p9(23 downto 17);
    trunc_ln76_fu_518_p1 <= j_fu_90(2 - 1 downto 0);
    xor_ln74_1_fu_478_p2 <= (select_ln65_2_fu_298_p3 xor p_1_fu_164_p3);
    xor_ln74_2_fu_484_p2 <= (xor_ln74_fu_472_p2 xor xor_ln74_1_fu_478_p2);
    xor_ln74_3_fu_496_p2 <= (xor_ln74_4_fu_490_p2 xor select_ln65_4_fu_385_p3);
    xor_ln74_4_fu_490_p2 <= (p_5_fu_323_p3 xor p_3_fu_236_p3);
    xor_ln74_5_fu_502_p2 <= (xor_ln74_3_fu_496_p2 xor p_7_fu_410_p3);
    xor_ln74_fu_472_p2 <= (select_ln65_fu_211_p3 xor select_ln65_6_fu_464_p3);
    zext_ln76_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_522_p3),32));
    zext_ln76_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oans_fu_508_p2),32));
end behav;
