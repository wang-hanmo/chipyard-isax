-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_TOP_Pipeline_VITIS_LOOP_28_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln240 : IN STD_LOGIC_VECTOR (2 downto 0);
    inreg_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    inreg_ce0 : OUT STD_LOGIC;
    inreg_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    outreg_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    outreg_ce0 : OUT STD_LOGIC;
    outreg_we0 : OUT STD_LOGIC;
    outreg_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of TOP_TOP_Pipeline_VITIS_LOOP_28_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln28_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce0 : STD_LOGIC;
    signal p_sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce1 : STD_LOGIC;
    signal p_sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce2 : STD_LOGIC;
    signal p_sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce3 : STD_LOGIC;
    signal p_sbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce4 : STD_LOGIC;
    signal p_sbox_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce5 : STD_LOGIC;
    signal p_sbox_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce6 : STD_LOGIC;
    signal p_sbox_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce7 : STD_LOGIC;
    signal p_sbox_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce8 : STD_LOGIC;
    signal p_sbox_q8 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address9 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce9 : STD_LOGIC;
    signal p_sbox_q9 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address10 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce10 : STD_LOGIC;
    signal p_sbox_q10 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address11 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce11 : STD_LOGIC;
    signal p_sbox_q11 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address12 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce12 : STD_LOGIC;
    signal p_sbox_q12 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address13 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce13 : STD_LOGIC;
    signal p_sbox_q13 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address14 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce14 : STD_LOGIC;
    signal p_sbox_q14 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_address15 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_sbox_ce15 : STD_LOGIC;
    signal p_sbox_q15 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln29_1_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_reg_1199 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_reg_1199_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln36_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_6_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_7_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_8_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_9_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_10_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_11_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_12_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_13_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_14_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_15_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_170 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln28_fu_413_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln29_fu_419_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln29_fu_423_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_8_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_9_fu_463_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_478_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_493_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_508_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_3_fu_523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_4_fu_538_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_5_fu_553_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_6_fu_568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_7_fu_583_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_10_fu_598_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_11_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_12_fu_628_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_13_fu_643_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_14_fu_658_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_679_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_1_fu_691_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_2_fu_703_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln38_3_fu_715_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_4_fu_727_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_5_fu_739_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_6_fu_751_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln38_7_fu_763_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_8_fu_775_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_9_fu_787_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_10_fu_799_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln38_11_fu_811_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_12_fu_823_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln38_13_fu_835_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln38_fu_673_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_847_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln38_1_fu_683_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_861_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_875_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_1_fu_869_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln38_2_fu_695_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_883_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_897_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_2_fu_891_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln38_3_fu_707_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_905_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_919_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln38_3_fu_913_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln38_4_fu_719_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_929_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_943_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_4_fu_937_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln38_5_fu_731_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_951_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_fu_965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_5_fu_959_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln38_6_fu_743_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_fu_973_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_32_fu_987_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_6_fu_981_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln38_7_fu_755_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_fu_995_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_10_fu_1009_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln38_7_fu_1003_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln38_8_fu_767_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_1019_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_34_fu_1033_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_8_fu_1027_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln38_9_fu_779_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_fu_1041_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_35_fu_1055_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_9_fu_1049_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln38_s_fu_791_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_13_fu_1063_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_36_fu_1077_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_10_fu_1071_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln38_10_fu_803_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_14_fu_1085_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_15_fu_1099_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln38_11_fu_1093_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln38_11_fu_815_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_1123_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_12_fu_1117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_12_fu_827_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_fu_1131_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_38_fu_1145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_13_fu_1139_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal shl_ln38_13_fu_839_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_18_fu_1153_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_39_fu_1167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_14_fu_1161_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal b_fu_1175_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_TOP_Pipeline_VITIS_LOOP_28_1_p_sbox_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p_sbox_U : component TOP_TOP_Pipeline_VITIS_LOOP_28_1_p_sbox_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_sbox_address0,
        ce0 => p_sbox_ce0,
        q0 => p_sbox_q0,
        address1 => p_sbox_address1,
        ce1 => p_sbox_ce1,
        q1 => p_sbox_q1,
        address2 => p_sbox_address2,
        ce2 => p_sbox_ce2,
        q2 => p_sbox_q2,
        address3 => p_sbox_address3,
        ce3 => p_sbox_ce3,
        q3 => p_sbox_q3,
        address4 => p_sbox_address4,
        ce4 => p_sbox_ce4,
        q4 => p_sbox_q4,
        address5 => p_sbox_address5,
        ce5 => p_sbox_ce5,
        q5 => p_sbox_q5,
        address6 => p_sbox_address6,
        ce6 => p_sbox_ce6,
        q6 => p_sbox_q6,
        address7 => p_sbox_address7,
        ce7 => p_sbox_ce7,
        q7 => p_sbox_q7,
        address8 => p_sbox_address8,
        ce8 => p_sbox_ce8,
        q8 => p_sbox_q8,
        address9 => p_sbox_address9,
        ce9 => p_sbox_ce9,
        q9 => p_sbox_q9,
        address10 => p_sbox_address10,
        ce10 => p_sbox_ce10,
        q10 => p_sbox_q10,
        address11 => p_sbox_address11,
        ce11 => p_sbox_ce11,
        q11 => p_sbox_q11,
        address12 => p_sbox_address12,
        ce12 => p_sbox_ce12,
        q12 => p_sbox_q12,
        address13 => p_sbox_address13,
        ce13 => p_sbox_ce13,
        q13 => p_sbox_q13,
        address14 => p_sbox_address14,
        ce14 => p_sbox_ce14,
        q14 => p_sbox_q14,
        address15 => p_sbox_address15,
        ce15 => p_sbox_ce15,
        q15 => p_sbox_q15);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln28_fu_407_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_170 <= add_ln28_fu_413_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_170 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                    zext_ln29_1_reg_1199(2 downto 0) <= zext_ln29_1_fu_429_p1(2 downto 0);
                    zext_ln29_1_reg_1199_pp0_iter1_reg(2 downto 0) <= zext_ln29_1_reg_1199(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_1_reg_1199(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_1_reg_1199_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln28_fu_413_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    add_ln29_fu_423_p2 <= std_logic_vector(unsigned(zext_ln240) + unsigned(zext_ln29_fu_419_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln28_fu_407_p2)
    begin
        if (((icmp_ln28_fu_407_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_170, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_170;
        end if; 
    end process;

    b_fu_1175_p3 <= (tmp_39_fu_1167_p3 & or_ln38_14_fu_1161_p2);
    icmp_ln28_fu_407_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_2) else "0";
    inreg_address0 <= zext_ln29_1_fu_429_p1(3 - 1 downto 0);

    inreg_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inreg_ce0 <= ap_const_logic_1;
        else 
            inreg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln38_10_fu_1071_p2 <= (tmp_13_fu_1063_p3 or shl_ln38_s_fu_791_p3);
    or_ln38_11_fu_1093_p2 <= (tmp_14_fu_1085_p3 or shl_ln38_10_fu_803_p3);
    or_ln38_12_fu_1117_p2 <= (tmp_16_fu_1109_p3 or shl_ln38_11_fu_815_p3);
    or_ln38_13_fu_1139_p2 <= (tmp_17_fu_1131_p3 or shl_ln38_12_fu_827_p3);
    or_ln38_14_fu_1161_p2 <= (tmp_18_fu_1153_p3 or shl_ln38_13_fu_839_p3);
    or_ln38_1_fu_869_p2 <= (tmp_4_fu_861_p3 or shl_ln38_1_fu_683_p3);
    or_ln38_2_fu_891_p2 <= (tmp_s_fu_883_p3 or shl_ln38_2_fu_695_p3);
    or_ln38_3_fu_913_p2 <= (tmp_3_fu_905_p3 or shl_ln38_3_fu_707_p3);
    or_ln38_4_fu_937_p2 <= (tmp_6_fu_929_p3 or shl_ln38_4_fu_719_p3);
    or_ln38_5_fu_959_p2 <= (tmp_7_fu_951_p3 or shl_ln38_5_fu_731_p3);
    or_ln38_6_fu_981_p2 <= (tmp_8_fu_973_p3 or shl_ln38_6_fu_743_p3);
    or_ln38_7_fu_1003_p2 <= (tmp_9_fu_995_p3 or shl_ln38_7_fu_755_p3);
    or_ln38_8_fu_1027_p2 <= (tmp_11_fu_1019_p3 or shl_ln38_8_fu_767_p3);
    or_ln38_9_fu_1049_p2 <= (tmp_12_fu_1041_p3 or shl_ln38_9_fu_779_p3);
    or_ln38_fu_847_p2 <= (shl_ln38_fu_673_p2 or p_sbox_q15);
    outreg_address0 <= zext_ln29_1_reg_1199_pp0_iter1_reg(3 - 1 downto 0);

    outreg_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outreg_ce0 <= ap_const_logic_1;
        else 
            outreg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outreg_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_fu_1175_p3),64));

    outreg_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outreg_we0 <= ap_const_logic_1;
        else 
            outreg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_10_fu_598_p4 <= inreg_q0(26 downto 19);
    p_11_fu_613_p4 <= inreg_q0(31 downto 24);
    p_12_fu_628_p4 <= inreg_q0(32 downto 25);
    p_13_fu_643_p4 <= inreg_q0(33 downto 26);
    p_14_fu_658_p4 <= inreg_q0(34 downto 27);
    p_1_fu_493_p4 <= inreg_q0(15 downto 8);
    p_2_fu_508_p4 <= inreg_q0(16 downto 9);
    p_3_fu_523_p4 <= inreg_q0(17 downto 10);
    p_4_fu_538_p4 <= inreg_q0(18 downto 11);
    p_5_fu_553_p4 <= inreg_q0(23 downto 16);
    p_6_fu_568_p4 <= inreg_q0(24 downto 17);
    p_7_fu_583_p4 <= inreg_q0(25 downto 18);
    p_8_fu_448_p4 <= inreg_q0(8 downto 1);
    p_9_fu_463_p4 <= inreg_q0(9 downto 2);
    p_fu_439_p1 <= inreg_q0(8 - 1 downto 0);
    p_s_fu_478_p4 <= inreg_q0(10 downto 3);
    p_sbox_address0 <= zext_ln36_15_fu_668_p1(8 - 1 downto 0);
    p_sbox_address1 <= zext_ln36_14_fu_653_p1(8 - 1 downto 0);
    p_sbox_address10 <= zext_ln36_5_fu_518_p1(8 - 1 downto 0);
    p_sbox_address11 <= zext_ln36_4_fu_503_p1(8 - 1 downto 0);
    p_sbox_address12 <= zext_ln36_3_fu_488_p1(8 - 1 downto 0);
    p_sbox_address13 <= zext_ln36_2_fu_473_p1(8 - 1 downto 0);
    p_sbox_address14 <= zext_ln36_1_fu_458_p1(8 - 1 downto 0);
    p_sbox_address15 <= zext_ln36_fu_443_p1(8 - 1 downto 0);
    p_sbox_address2 <= zext_ln36_13_fu_638_p1(8 - 1 downto 0);
    p_sbox_address3 <= zext_ln36_12_fu_623_p1(8 - 1 downto 0);
    p_sbox_address4 <= zext_ln36_11_fu_608_p1(8 - 1 downto 0);
    p_sbox_address5 <= zext_ln36_10_fu_593_p1(8 - 1 downto 0);
    p_sbox_address6 <= zext_ln36_9_fu_578_p1(8 - 1 downto 0);
    p_sbox_address7 <= zext_ln36_8_fu_563_p1(8 - 1 downto 0);
    p_sbox_address8 <= zext_ln36_7_fu_548_p1(8 - 1 downto 0);
    p_sbox_address9 <= zext_ln36_6_fu_533_p1(8 - 1 downto 0);

    p_sbox_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce0 <= ap_const_logic_1;
        else 
            p_sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce1 <= ap_const_logic_1;
        else 
            p_sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce10 <= ap_const_logic_1;
        else 
            p_sbox_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce11_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce11 <= ap_const_logic_1;
        else 
            p_sbox_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce12_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce12 <= ap_const_logic_1;
        else 
            p_sbox_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce13_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce13 <= ap_const_logic_1;
        else 
            p_sbox_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce14 <= ap_const_logic_1;
        else 
            p_sbox_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce15 <= ap_const_logic_1;
        else 
            p_sbox_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce2 <= ap_const_logic_1;
        else 
            p_sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce3 <= ap_const_logic_1;
        else 
            p_sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce4 <= ap_const_logic_1;
        else 
            p_sbox_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce5 <= ap_const_logic_1;
        else 
            p_sbox_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce6 <= ap_const_logic_1;
        else 
            p_sbox_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce7 <= ap_const_logic_1;
        else 
            p_sbox_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce8 <= ap_const_logic_1;
        else 
            p_sbox_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    p_sbox_ce9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_sbox_ce9 <= ap_const_logic_1;
        else 
            p_sbox_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln38_10_fu_803_p3 <= (trunc_ln38_10_fu_799_p1 & ap_const_lv24_0);
    shl_ln38_11_fu_815_p3 <= (trunc_ln38_11_fu_811_p1 & ap_const_lv25_0);
    shl_ln38_12_fu_827_p3 <= (trunc_ln38_12_fu_823_p1 & ap_const_lv26_0);
    shl_ln38_13_fu_839_p3 <= (trunc_ln38_13_fu_835_p1 & ap_const_lv27_0);
    shl_ln38_1_fu_683_p3 <= (trunc_ln38_fu_679_p1 & ap_const_lv2_0);
    shl_ln38_2_fu_695_p3 <= (trunc_ln38_1_fu_691_p1 & ap_const_lv3_0);
    shl_ln38_3_fu_707_p3 <= (trunc_ln38_2_fu_703_p1 & ap_const_lv8_0);
    shl_ln38_4_fu_719_p3 <= (trunc_ln38_3_fu_715_p1 & ap_const_lv9_0);
    shl_ln38_5_fu_731_p3 <= (trunc_ln38_4_fu_727_p1 & ap_const_lv10_0);
    shl_ln38_6_fu_743_p3 <= (trunc_ln38_5_fu_739_p1 & ap_const_lv11_0);
    shl_ln38_7_fu_755_p3 <= (trunc_ln38_6_fu_751_p1 & ap_const_lv16_0);
    shl_ln38_8_fu_767_p3 <= (trunc_ln38_7_fu_763_p1 & ap_const_lv17_0);
    shl_ln38_9_fu_779_p3 <= (trunc_ln38_8_fu_775_p1 & ap_const_lv18_0);
    shl_ln38_fu_673_p2 <= std_logic_vector(shift_left(unsigned(p_sbox_q14),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln38_s_fu_791_p3 <= (trunc_ln38_9_fu_787_p1 & ap_const_lv19_0);
    tmp_10_fu_1009_p4 <= p_sbox_q7(7 downto 3);
    tmp_11_fu_1019_p3 <= (tmp_10_fu_1009_p4 & or_ln38_7_fu_1003_p2);
    tmp_12_fu_1041_p3 <= (tmp_34_fu_1033_p3 & or_ln38_8_fu_1027_p2);
    tmp_13_fu_1063_p3 <= (tmp_35_fu_1055_p3 & or_ln38_9_fu_1049_p2);
    tmp_14_fu_1085_p3 <= (tmp_36_fu_1077_p3 & or_ln38_10_fu_1071_p2);
    tmp_15_fu_1099_p4 <= p_sbox_q3(7 downto 3);
    tmp_16_fu_1109_p3 <= (tmp_15_fu_1099_p4 & or_ln38_11_fu_1093_p2);
    tmp_17_fu_1131_p3 <= (tmp_37_fu_1123_p3 & or_ln38_12_fu_1117_p2);
    tmp_18_fu_1153_p3 <= (tmp_38_fu_1145_p3 & or_ln38_13_fu_1139_p2);
    tmp_22_fu_875_p3 <= p_sbox_q13(7 downto 7);
    tmp_24_fu_897_p3 <= p_sbox_q12(7 downto 7);
    tmp_26_fu_943_p3 <= p_sbox_q10(7 downto 7);
    tmp_30_fu_965_p3 <= p_sbox_q9(7 downto 7);
    tmp_32_fu_987_p3 <= p_sbox_q8(7 downto 7);
    tmp_34_fu_1033_p3 <= p_sbox_q6(7 downto 7);
    tmp_35_fu_1055_p3 <= p_sbox_q5(7 downto 7);
    tmp_36_fu_1077_p3 <= p_sbox_q4(7 downto 7);
    tmp_37_fu_1123_p3 <= p_sbox_q2(7 downto 7);
    tmp_38_fu_1145_p3 <= p_sbox_q1(7 downto 7);
    tmp_39_fu_1167_p3 <= p_sbox_q0(7 downto 7);
    tmp_3_fu_905_p3 <= (tmp_24_fu_897_p3 & or_ln38_2_fu_891_p2);
    tmp_4_fu_861_p3 <= (tmp_fu_853_p3 & or_ln38_fu_847_p2);
    tmp_5_fu_919_p4 <= p_sbox_q11(7 downto 3);
    tmp_6_fu_929_p3 <= (tmp_5_fu_919_p4 & or_ln38_3_fu_913_p2);
    tmp_7_fu_951_p3 <= (tmp_26_fu_943_p3 & or_ln38_4_fu_937_p2);
    tmp_8_fu_973_p3 <= (tmp_30_fu_965_p3 & or_ln38_5_fu_959_p2);
    tmp_9_fu_995_p3 <= (tmp_32_fu_987_p3 & or_ln38_6_fu_981_p2);
    tmp_fu_853_p3 <= p_sbox_q14(7 downto 7);
    tmp_s_fu_883_p3 <= (tmp_22_fu_875_p3 & or_ln38_1_fu_869_p2);
    trunc_ln38_10_fu_799_p1 <= p_sbox_q3(3 - 1 downto 0);
    trunc_ln38_11_fu_811_p1 <= p_sbox_q2(7 - 1 downto 0);
    trunc_ln38_12_fu_823_p1 <= p_sbox_q1(7 - 1 downto 0);
    trunc_ln38_13_fu_835_p1 <= p_sbox_q0(7 - 1 downto 0);
    trunc_ln38_1_fu_691_p1 <= p_sbox_q12(7 - 1 downto 0);
    trunc_ln38_2_fu_703_p1 <= p_sbox_q11(3 - 1 downto 0);
    trunc_ln38_3_fu_715_p1 <= p_sbox_q10(7 - 1 downto 0);
    trunc_ln38_4_fu_727_p1 <= p_sbox_q9(7 - 1 downto 0);
    trunc_ln38_5_fu_739_p1 <= p_sbox_q8(7 - 1 downto 0);
    trunc_ln38_6_fu_751_p1 <= p_sbox_q7(3 - 1 downto 0);
    trunc_ln38_7_fu_763_p1 <= p_sbox_q6(7 - 1 downto 0);
    trunc_ln38_8_fu_775_p1 <= p_sbox_q5(7 - 1 downto 0);
    trunc_ln38_9_fu_787_p1 <= p_sbox_q4(7 - 1 downto 0);
    trunc_ln38_fu_679_p1 <= p_sbox_q13(7 - 1 downto 0);
    zext_ln29_1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_423_p2),64));
    zext_ln29_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),3));
    zext_ln36_10_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_7_fu_583_p4),64));
    zext_ln36_11_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_10_fu_598_p4),64));
    zext_ln36_12_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_11_fu_613_p4),64));
    zext_ln36_13_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_12_fu_628_p4),64));
    zext_ln36_14_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_13_fu_643_p4),64));
    zext_ln36_15_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_14_fu_658_p4),64));
    zext_ln36_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_8_fu_448_p4),64));
    zext_ln36_2_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_9_fu_463_p4),64));
    zext_ln36_3_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_478_p4),64));
    zext_ln36_4_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_fu_493_p4),64));
    zext_ln36_5_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_fu_508_p4),64));
    zext_ln36_6_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_3_fu_523_p4),64));
    zext_ln36_7_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4_fu_538_p4),64));
    zext_ln36_8_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_5_fu_553_p4),64));
    zext_ln36_9_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_6_fu_568_p4),64));
    zext_ln36_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_fu_439_p1),64));
end behav;
