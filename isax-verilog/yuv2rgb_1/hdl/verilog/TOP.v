// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TOP_TOP,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.589063,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1005,HLS_SYN_LUT=2995,HLS_VERSION=2023_2}" *)

module TOP (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IN_r_TDATA,
        IN_r_TVALID,
        IN_r_TREADY,
        OUT_r_TDATA,
        OUT_r_TVALID,
        OUT_r_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 7'd1;
parameter    ap_ST_fsm_pp0_stage2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage4 = 7'd16;
parameter    ap_ST_fsm_pp0_stage5 = 7'd32;
parameter    ap_ST_fsm_pp0_stage6 = 7'd64;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [191:0] IN_r_TDATA;
input   IN_r_TVALID;
output   IN_r_TREADY;
output  [127:0] OUT_r_TDATA;
output   OUT_r_TVALID;
input   OUT_r_TREADY;

reg ap_idle;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage6;
wire    regslice_both_OUT_r_V_data_V_U_apdone_blk;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage6_subdone;
reg   [0:0] tmp_reg_375;
reg   [0:0] icmp_ln140_reg_425;
reg    ap_condition_exit_pp0_iter0_stage6;
reg    ap_ready_int;
reg   [3:0] outreg_address0;
reg    outreg_ce0;
reg    outreg_we0;
wire   [63:0] outreg_q0;
reg    outreg_ce1;
reg    outreg_we1;
reg    IN_r_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    OUT_r_TDATA_blk_n;
reg   [0:0] tmp_reg_375_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    ap_block_state10_pp0_stage2_iter1;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage2_11001;
reg   [6:0] trunc_ln26_reg_402;
reg   [0:0] icmp_ln111_reg_411;
wire   [0:0] tmp_nbreadreq_fu_104_p3;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] in_rs1_reg_382;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state9_pp0_stage1_iter1;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] in_rs2_reg_387;
reg   [4:0] tmp_4_reg_392;
wire   [1:0] tmp_8_fu_237_p4;
reg   [1:0] tmp_8_reg_397;
wire   [6:0] trunc_ln26_fu_287_p1;
wire   [0:0] icmp_ln111_fu_324_p2;
wire   [3:0] add_ln133_fu_334_p2;
reg   [3:0] add_ln133_reg_415;
wire   [0:0] icmp_ln140_fu_355_p2;
reg   [0:0] icmp_ln140_reg_425_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
wire    grp_Impl_yuv2rgb_fu_178_ap_start;
wire    grp_Impl_yuv2rgb_fu_178_ap_done;
wire    grp_Impl_yuv2rgb_fu_178_ap_idle;
wire    grp_Impl_yuv2rgb_fu_178_ap_ready;
reg    grp_Impl_yuv2rgb_fu_178_ap_ce;
wire   [3:0] grp_Impl_yuv2rgb_fu_178_out_r_address0;
wire    grp_Impl_yuv2rgb_fu_178_out_r_ce0;
wire    grp_Impl_yuv2rgb_fu_178_out_r_we0;
wire   [63:0] grp_Impl_yuv2rgb_fu_178_out_r_d0;
wire   [3:0] grp_Impl_yuv2rgb_fu_178_out_r_address1;
wire    grp_Impl_yuv2rgb_fu_178_out_r_ce1;
wire    grp_Impl_yuv2rgb_fu_178_out_r_we1;
wire   [63:0] grp_Impl_yuv2rgb_fu_178_out_r_d1;
reg    ap_predicate_op28_call_state2;
reg    ap_predicate_op70_call_state6;
reg    ap_predicate_op71_call_state7;
reg    ap_block_state10_pp0_stage2_iter1_ignore_call0;
reg    ap_block_pp0_stage2_11001_ignoreCallOp28;
reg    ap_block_pp0_stage3_11001_ignoreCallOp34;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_block_pp0_stage4_11001_ignoreCallOp69;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_block_pp0_stage5_11001_ignoreCallOp70;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_block_pp0_stage6_11001_ignoreCallOp71;
reg   [63:0] ap_phi_mux_out_data_4_phi_fu_166_p8;
reg   [63:0] ap_phi_reg_pp0_iter0_out_data_4_reg_162;
reg   [63:0] ap_phi_reg_pp0_iter1_out_data_4_reg_162;
reg    ap_block_pp0_stage6_11001;
reg    grp_Impl_yuv2rgb_fu_178_ap_start_reg;
reg    ap_predicate_op28_call_state2_state4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln110_2_fu_319_p1;
wire   [63:0] zext_ln113_1_fu_350_p1;
wire   [63:0] zext_ln133_1_fu_361_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] tmp_2_fu_247_p3;
wire   [2:0] tmp_6_fu_227_p4;
wire   [3:0] outidx_fu_265_p3;
wire   [0:0] icmp_ln92_fu_273_p2;
wire   [1:0] tmp_9_cast_fu_255_p4;
wire   [3:0] tmp_5_fu_295_p3;
wire   [3:0] zext_ln110_fu_291_p1;
wire   [1:0] outidx_1_fu_279_p3;
wire   [3:0] sub_ln110_fu_303_p2;
wire   [3:0] zext_ln110_1_fu_309_p1;
wire   [3:0] add_ln110_fu_313_p2;
wire   [3:0] zext_ln133_fu_330_p1;
wire   [3:0] zext_ln113_fu_340_p1;
wire   [3:0] add_ln113_fu_344_p2;
wire   [63:0] in_inst_fu_193_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_condition_exit_pp0_iter1_stage2;
reg    ap_idle_pp0_0to0;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage5_11001;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
wire    regslice_both_IN_r_V_data_V_U_apdone_blk;
wire   [191:0] IN_r_TDATA_int_regslice;
wire    IN_r_TVALID_int_regslice;
reg    IN_r_TREADY_int_regslice;
wire    regslice_both_IN_r_V_data_V_U_ack_in;
wire   [127:0] OUT_r_TDATA_int_regslice;
reg    OUT_r_TVALID_int_regslice;
wire    OUT_r_TREADY_int_regslice;
wire    regslice_both_OUT_r_V_data_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
   ap_CS_fsm = 7'd1;
   ap_enable_reg_pp0_iter1 = 1'b0;
   ap_enable_reg_pp0_iter0_reg = 1'b0;
   grp_Impl_yuv2rgb_fu_178_ap_start_reg = 1'b0;
   ap_done_reg = 1'b0;
end

TOP_outreg_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
outreg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outreg_address0),
    .ce0(outreg_ce0),
    .we0(outreg_we0),
    .d0(grp_Impl_yuv2rgb_fu_178_out_r_d0),
    .q0(outreg_q0),
    .address1(grp_Impl_yuv2rgb_fu_178_out_r_address1),
    .ce1(outreg_ce1),
    .we1(outreg_we1),
    .d1(grp_Impl_yuv2rgb_fu_178_out_r_d1)
);

TOP_Impl_yuv2rgb grp_Impl_yuv2rgb_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Impl_yuv2rgb_fu_178_ap_start),
    .ap_done(grp_Impl_yuv2rgb_fu_178_ap_done),
    .ap_idle(grp_Impl_yuv2rgb_fu_178_ap_idle),
    .ap_ready(grp_Impl_yuv2rgb_fu_178_ap_ready),
    .ap_ce(grp_Impl_yuv2rgb_fu_178_ap_ce),
    .in_0_0_val(in_rs1_reg_382),
    .in_0_1_val(in_rs2_reg_387),
    .out_r_address0(grp_Impl_yuv2rgb_fu_178_out_r_address0),
    .out_r_ce0(grp_Impl_yuv2rgb_fu_178_out_r_ce0),
    .out_r_we0(grp_Impl_yuv2rgb_fu_178_out_r_we0),
    .out_r_d0(grp_Impl_yuv2rgb_fu_178_out_r_d0),
    .out_r_address1(grp_Impl_yuv2rgb_fu_178_out_r_address1),
    .out_r_ce1(grp_Impl_yuv2rgb_fu_178_out_r_ce1),
    .out_r_we1(grp_Impl_yuv2rgb_fu_178_out_r_we1),
    .out_r_d1(grp_Impl_yuv2rgb_fu_178_out_r_d1),
    .out_offset(tmp_8_reg_397)
);

TOP_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage6),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

TOP_regslice_both #(
    .DataWidth( 192 ))
regslice_both_IN_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_r_TDATA),
    .vld_in(IN_r_TVALID),
    .ack_in(regslice_both_IN_r_V_data_V_U_ack_in),
    .data_out(IN_r_TDATA_int_regslice),
    .vld_out(IN_r_TVALID_int_regslice),
    .ack_out(IN_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_r_V_data_V_U_apdone_blk)
);

TOP_regslice_both #(
    .DataWidth( 128 ))
regslice_both_OUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUT_r_TDATA_int_regslice),
    .vld_in(OUT_r_TVALID_int_regslice),
    .ack_in(OUT_r_TREADY_int_regslice),
    .data_out(OUT_r_TDATA),
    .vld_out(regslice_both_OUT_r_V_data_V_U_vld_out),
    .ack_out(OUT_r_TREADY),
    .apdone_blk(regslice_both_OUT_r_V_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage6_subdone) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Impl_yuv2rgb_fu_178_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op28_call_state2_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_Impl_yuv2rgb_fu_178_ap_start_reg <= 1'b1;
        end else if ((grp_Impl_yuv2rgb_fu_178_ap_ready == 1'b1)) begin
            grp_Impl_yuv2rgb_fu_178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln26_fu_287_p1 == 7'd11))) begin
        ap_phi_reg_pp0_iter0_out_data_4_reg_162 <= 64'd0;
    end else if ((((tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (trunc_ln26_reg_402 == 7'd43)) | (~(trunc_ln26_reg_402 == 7'd11) & ~(trunc_ln26_reg_402 == 7'd43) & (tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln111_reg_411 == 1'd1)))) begin
        ap_phi_reg_pp0_iter0_out_data_4_reg_162 <= outreg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln133_reg_415 <= add_ln133_fu_334_p2;
        icmp_ln111_reg_411 <= icmp_ln111_fu_324_p2;
        icmp_ln140_reg_425 <= icmp_ln140_fu_355_p2;
        icmp_ln140_reg_425_pp0_iter1_reg <= icmp_ln140_reg_425;
        in_rs1_reg_382 <= {{IN_r_TDATA_int_regslice[127:64]}};
        in_rs2_reg_387 <= {{IN_r_TDATA_int_regslice[191:128]}};
        tmp_4_reg_392 <= {{IN_r_TDATA_int_regslice[11:7]}};
        tmp_8_reg_397 <= {{IN_r_TDATA_int_regslice[31:30]}};
        trunc_ln26_reg_402 <= trunc_ln26_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_phi_reg_pp0_iter1_out_data_4_reg_162 <= ap_phi_reg_pp0_iter0_out_data_4_reg_162;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_375 <= tmp_nbreadreq_fu_104_p3;
        tmp_reg_375_pp0_iter1_reg <= tmp_reg_375;
    end
end

always @ (*) begin
    if (((tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IN_r_TDATA_blk_n = IN_r_TVALID_int_regslice;
    end else begin
        IN_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IN_r_TREADY_int_regslice = 1'b1;
    end else begin
        IN_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_375_pp0_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_375_pp0_iter1_reg == 1'd1)))) begin
        OUT_r_TDATA_blk_n = OUT_r_TREADY_int_regslice;
    end else begin
        OUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_375_pp0_iter1_reg == 1'd1))) begin
        OUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUT_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln140_reg_425 == 1'd1) & (tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage6_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln140_reg_425_pp0_iter1_reg == 1'd1) & (tmp_reg_375_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln26_reg_402 == 7'd11) & ~(trunc_ln26_reg_402 == 7'd43) & (icmp_ln111_reg_411 == 1'd0) & (tmp_reg_375_pp0_iter1_reg == 1'd1))) begin
        ap_phi_mux_out_data_4_phi_fu_166_p8 = outreg_q0;
    end else begin
        ap_phi_mux_out_data_4_phi_fu_166_p8 = ap_phi_reg_pp0_iter1_out_data_4_reg_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp71) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp70) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp69) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp34) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp28) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_Impl_yuv2rgb_fu_178_ap_ce = 1'b1;
    end else begin
        grp_Impl_yuv2rgb_fu_178_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outreg_address0 = zext_ln133_1_fu_361_p1;
    end else if ((~(trunc_ln26_fu_287_p1 == 7'd43) & ~(trunc_ln26_fu_287_p1 == 7'd11) & (tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln111_fu_324_p2 == 1'd1))) begin
        outreg_address0 = zext_ln113_1_fu_350_p1;
    end else if (((tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln26_fu_287_p1 == 7'd43))) begin
        outreg_address0 = zext_ln110_2_fu_319_p1;
    end else if ((((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op71_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op70_call_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        outreg_address0 = grp_Impl_yuv2rgb_fu_178_out_r_address0;
    end else begin
        outreg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln26_fu_287_p1 == 7'd43)) | (~(trunc_ln26_fu_287_p1 == 7'd43) & ~(trunc_ln26_fu_287_p1 == 7'd11) & (tmp_reg_375 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln111_fu_324_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        outreg_ce0 = 1'b1;
    end else if ((((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op71_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op70_call_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        outreg_ce0 = grp_Impl_yuv2rgb_fu_178_out_r_ce0;
    end else begin
        outreg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op71_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op70_call_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        outreg_ce1 = grp_Impl_yuv2rgb_fu_178_out_r_ce1;
    end else begin
        outreg_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op71_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op70_call_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        outreg_we0 = grp_Impl_yuv2rgb_fu_178_out_r_we0;
    end else begin
        outreg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op71_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op70_call_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        outreg_we1 = grp_Impl_yuv2rgb_fu_178_out_r_we1;
    end else begin
        outreg_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_TREADY = regslice_both_IN_r_V_data_V_U_ack_in;

assign OUT_r_TDATA_int_regslice = {{{ap_phi_mux_out_data_4_phi_fu_166_p8}, {59'd0}}, {tmp_4_reg_392}};

assign OUT_r_TVALID = regslice_both_OUT_r_V_data_V_U_vld_out;

assign add_ln110_fu_313_p2 = (sub_ln110_fu_303_p2 + zext_ln110_1_fu_309_p1);

assign add_ln113_fu_344_p2 = (sub_ln110_fu_303_p2 + zext_ln113_fu_340_p1);

assign add_ln133_fu_334_p2 = (sub_ln110_fu_303_p2 + zext_ln133_fu_330_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage1_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage1_iter0)) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | (1'b1 == ap_block_state9_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage1_iter0)) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | (1'b1 == ap_block_state9_pp0_stage1_iter1))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage1_iter0)) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | (1'b1 == ap_block_state10_pp0_stage2_iter1))) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp28 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state10_pp0_stage2_iter1_ignore_call0) | (1'b1 == ap_block_state10_io))) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | (1'b1 == ap_block_state10_pp0_stage2_iter1))) | ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001_ignoreCallOp34 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001_ignoreCallOp69 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001_ignoreCallOp70 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001_ignoreCallOp71 = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state10_io = ((1'b0 == OUT_r_TREADY_int_regslice) & (tmp_reg_375_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_state10_pp0_stage2_iter1 = ((regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1) | ((1'b0 == OUT_r_TREADY_int_regslice) & (tmp_reg_375_pp0_iter1_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage2_iter1_ignore_call0 = ((regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1) | ((1'b0 == OUT_r_TREADY_int_regslice) & (tmp_reg_375_pp0_iter1_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((tmp_reg_375 == 1'd1) & (1'b0 == IN_r_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state9_io = ((1'b0 == OUT_r_TREADY_int_regslice) & (tmp_reg_375_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_state9_pp0_stage1_iter1 = ((1'b0 == OUT_r_TREADY_int_regslice) & (tmp_reg_375_pp0_iter1_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage6;

always @ (*) begin
    ap_predicate_op28_call_state2 = (~(trunc_ln26_reg_402 == 7'd11) & ~(trunc_ln26_reg_402 == 7'd43) & (tmp_reg_375 == 1'd1) & (icmp_ln111_reg_411 == 1'd0));
end

always @ (*) begin
    ap_predicate_op28_call_state2_state4 = (~(trunc_ln26_fu_287_p1 == 7'd43) & ~(trunc_ln26_fu_287_p1 == 7'd11) & (tmp_reg_375 == 1'd1) & (icmp_ln111_fu_324_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op70_call_state6 = (~(trunc_ln26_reg_402 == 7'd11) & ~(trunc_ln26_reg_402 == 7'd43) & (tmp_reg_375 == 1'd1) & (icmp_ln111_reg_411 == 1'd0));
end

always @ (*) begin
    ap_predicate_op71_call_state7 = (~(trunc_ln26_reg_402 == 7'd11) & ~(trunc_ln26_reg_402 == 7'd43) & (tmp_reg_375 == 1'd1) & (icmp_ln111_reg_411 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_Impl_yuv2rgb_fu_178_ap_start = grp_Impl_yuv2rgb_fu_178_ap_start_reg;

assign icmp_ln111_fu_324_p2 = ((trunc_ln26_fu_287_p1 == 7'd91) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_355_p2 = ((in_inst_fu_193_p1 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_273_p2 = ((outidx_fu_265_p3 > 4'd2) ? 1'b1 : 1'b0);

assign in_inst_fu_193_p1 = IN_r_TDATA_int_regslice[63:0];

assign outidx_1_fu_279_p3 = ((icmp_ln92_fu_273_p2[0:0] == 1'b1) ? 2'd0 : tmp_9_cast_fu_255_p4);

assign outidx_fu_265_p3 = {{tmp_2_fu_247_p3}, {tmp_6_fu_227_p4}};

assign sub_ln110_fu_303_p2 = (tmp_5_fu_295_p3 - zext_ln110_fu_291_p1);

assign tmp_2_fu_247_p3 = IN_r_TDATA_int_regslice[32'd25];

assign tmp_5_fu_295_p3 = {{tmp_8_fu_237_p4}, {2'd0}};

assign tmp_6_fu_227_p4 = {{IN_r_TDATA_int_regslice[14:12]}};

assign tmp_8_fu_237_p4 = {{IN_r_TDATA_int_regslice[31:30]}};

assign tmp_9_cast_fu_255_p4 = {{IN_r_TDATA_int_regslice[13:12]}};

assign tmp_nbreadreq_fu_104_p3 = IN_r_TVALID_int_regslice;

assign trunc_ln26_fu_287_p1 = IN_r_TDATA_int_regslice[6:0];

assign zext_ln110_1_fu_309_p1 = outidx_1_fu_279_p3;

assign zext_ln110_2_fu_319_p1 = add_ln110_fu_313_p2;

assign zext_ln110_fu_291_p1 = tmp_8_fu_237_p4;

assign zext_ln113_1_fu_350_p1 = add_ln113_fu_344_p2;

assign zext_ln113_fu_340_p1 = outidx_1_fu_279_p3;

assign zext_ln133_1_fu_361_p1 = add_ln133_reg_415;

assign zext_ln133_fu_330_p1 = outidx_1_fu_279_p3;


reg find_kernel_block = 0;
// synthesis translate_off
`include "TOP_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //TOP

