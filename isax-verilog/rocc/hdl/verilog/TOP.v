// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TOP_TOP,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.085000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4,HLS_SYN_LUT=188,HLS_VERSION=2023_2}" *)

module TOP (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IN_r_TVALID,
        OUT_r_TREADY,
        IN_r_TDATA,
        IN_r_TREADY,
        OUT_r_TDATA,
        OUT_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   IN_r_TVALID;
input   OUT_r_TREADY;
input  [191:0] IN_r_TDATA;
output   IN_r_TREADY;
output  [127:0] OUT_r_TDATA;
output   OUT_r_TVALID;

reg ap_idle;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_OUT_r_V_data_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln47_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    IN_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    OUT_r_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] in_rs2_fu_91_p4;
wire   [63:0] in_rs1_fu_81_p4;
wire   [63:0] out_data_fu_111_p2;
wire   [4:0] tmp_fu_101_p4;
wire   [63:0] in_inst_fu_77_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
wire    regslice_both_IN_r_V_data_V_U_apdone_blk;
wire   [191:0] IN_r_TDATA_int_regslice;
wire    IN_r_TVALID_int_regslice;
reg    IN_r_TREADY_int_regslice;
wire    regslice_both_IN_r_V_data_V_U_ack_in;
wire   [127:0] OUT_r_TDATA_int_regslice;
reg    OUT_r_TVALID_int_regslice;
wire    OUT_r_TREADY_int_regslice;
wire    regslice_both_OUT_r_V_data_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
ap_CS_fsm = 1'd1;
ap_enable_reg_pp0_iter1 = 1'b0;
ap_done_reg = 1'b0;
end

TOP_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

TOP_regslice_both #(
    .DataWidth( 192 ))
regslice_both_IN_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(IN_r_TDATA),
    .vld_in(IN_r_TVALID),
    .ack_in(regslice_both_IN_r_V_data_V_U_ack_in),
    .data_out(IN_r_TDATA_int_regslice),
    .vld_out(IN_r_TVALID_int_regslice),
    .ack_out(IN_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_IN_r_V_data_V_U_apdone_blk)
);

TOP_regslice_both #(
    .DataWidth( 128 ))
regslice_both_OUT_r_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(OUT_r_TDATA_int_regslice),
    .vld_in(OUT_r_TVALID_int_regslice),
    .ack_in(OUT_r_TREADY_int_regslice),
    .data_out(OUT_r_TDATA),
    .vld_out(regslice_both_OUT_r_V_data_V_U_vld_out),
    .ack_out(OUT_r_TREADY),
    .apdone_blk(regslice_both_OUT_r_V_data_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready == 1'b0))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_TDATA_blk_n = IN_r_TVALID_int_regslice;
    end else begin
        IN_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_TREADY_int_regslice = 1'b1;
    end else begin
        IN_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        OUT_r_TDATA_blk_n = OUT_r_TREADY_int_regslice;
    end else begin
        OUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUT_r_TVALID_int_regslice = 1'b1;
    end else begin
        OUT_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IN_r_TREADY = regslice_both_IN_r_V_data_V_U_ack_in;

assign OUT_r_TDATA_int_regslice = {{{out_data_fu_111_p2}, {59'd0}}, {tmp_fu_101_p4}};

assign OUT_r_TVALID = regslice_both_OUT_r_V_data_V_U_vld_out;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == OUT_r_TREADY_int_regslice) | (1'b1 == ap_block_state2_pp0_stage0_iter1))) | ((ap_start_int == 1'b1) & ((1'b0 == OUT_r_TREADY_int_regslice) | (1'b1 == ap_block_state1_pp0_stage0_iter0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == OUT_r_TREADY_int_regslice) | (1'b1 == ap_block_state2_pp0_stage0_iter1))) | ((ap_start_int == 1'b1) & ((1'b0 == OUT_r_TREADY_int_regslice) | (1'b1 == ap_block_state1_pp0_stage0_iter0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == OUT_r_TREADY_int_regslice) | (1'b0 == IN_r_TVALID_int_regslice));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_OUT_r_V_data_V_U_apdone_blk == 1'b1) | (1'b0 == OUT_r_TREADY_int_regslice));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln47_fu_128_p2 = ((in_inst_fu_77_p1 == 64'd0) ? 1'b1 : 1'b0);

assign in_inst_fu_77_p1 = IN_r_TDATA_int_regslice[63:0];

assign in_rs1_fu_81_p4 = {{IN_r_TDATA_int_regslice[127:64]}};

assign in_rs2_fu_91_p4 = {{IN_r_TDATA_int_regslice[191:128]}};

assign out_data_fu_111_p2 = (in_rs2_fu_91_p4 + in_rs1_fu_81_p4);

assign tmp_fu_101_p4 = {{IN_r_TDATA_int_regslice[11:7]}};


reg find_kernel_block = 0;
// synthesis translate_off
`include "TOP_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //TOP

