// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module TOP_gmul_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ia,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ia;
output  [31:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_121_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] a_16_fu_104_p1;
reg   [7:0] a_16_reg_589;
reg   [2:0] j_fu_90;
wire   [2:0] j_2_fu_127_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] pans_fu_94;
wire   [31:0] pans_1_fu_540_p2;
wire   [31:0] ib_fu_140_p8;
wire   [25:0] ib_fu_140_p9;
wire   [0:0] trunc_ln60_fu_160_p1;
wire   [6:0] trunc_ln68_fu_171_p1;
wire   [7:0] a_fu_174_p3;
wire   [0:0] tmp_fu_182_p3;
wire   [7:0] a_2_fu_189_p2;
wire   [0:0] tmp_4_fu_203_p3;
wire   [7:0] a_3_fu_195_p3;
wire   [0:0] tmp_5_fu_228_p3;
wire   [7:0] a_17_fu_219_p4;
wire   [6:0] tmp_1_fu_244_p4;
wire   [7:0] a_5_fu_253_p3;
wire   [0:0] tmp_6_fu_261_p3;
wire   [7:0] a_6_fu_268_p2;
wire   [6:0] trunc_ln1_fu_282_p4;
wire   [0:0] icmp_ln65_fu_292_p2;
wire   [7:0] a_7_fu_274_p3;
wire   [0:0] tmp_7_fu_315_p3;
wire   [7:0] a_18_fu_306_p4;
wire   [6:0] tmp_2_fu_331_p4;
wire   [7:0] a_9_fu_340_p3;
wire   [0:0] tmp_8_fu_348_p3;
wire   [7:0] a_10_fu_355_p2;
wire   [6:0] trunc_ln71_1_fu_369_p4;
wire   [0:0] icmp_ln65_1_fu_379_p2;
wire   [7:0] a_11_fu_361_p3;
wire   [0:0] b_fu_402_p3;
wire   [7:0] a_19_fu_393_p4;
wire   [6:0] tmp_3_fu_418_p4;
wire   [7:0] a_13_fu_427_p3;
wire   [0:0] tmp_10_fu_435_p3;
wire   [7:0] a_14_fu_442_p2;
wire   [0:0] tmp_11_fu_456_p3;
wire   [7:0] a_15_fu_448_p3;
wire   [7:0] select_ln65_fu_211_p3;
wire   [7:0] select_ln65_6_fu_464_p3;
wire   [7:0] select_ln65_2_fu_298_p3;
wire   [7:0] p_1_fu_164_p3;
wire   [7:0] xor_ln74_fu_472_p2;
wire   [7:0] xor_ln74_1_fu_478_p2;
wire   [7:0] p_5_fu_323_p3;
wire   [7:0] p_3_fu_236_p3;
wire   [7:0] select_ln65_4_fu_385_p3;
wire   [7:0] xor_ln74_4_fu_490_p2;
wire   [7:0] xor_ln74_3_fu_496_p2;
wire   [7:0] p_7_fu_410_p3;
wire   [7:0] xor_ln74_5_fu_502_p2;
wire   [7:0] xor_ln74_2_fu_484_p2;
wire   [7:0] oans_fu_508_p2;
wire   [1:0] trunc_ln76_fu_518_p1;
wire   [4:0] shl_ln_fu_522_p3;
wire   [31:0] zext_ln76_fu_514_p1;
wire   [31:0] zext_ln76_1_fu_530_p1;
wire   [31:0] shl_ln76_fu_534_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] ib_fu_140_p1;
wire   [31:0] ib_fu_140_p3;
wire   [31:0] ib_fu_140_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
   ap_CS_fsm = 1'd1;
   ap_enable_reg_pp0_iter1 = 1'b0;
   j_fu_90 = 3'd0;
   pans_fu_94 = 32'd0;
   ap_done_reg = 1'b0;
end

TOP_sparsemux_7_32_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 32'h3 ),
    .din0_WIDTH( 26 ),
    .CASE1( 32'h1 ),
    .din1_WIDTH( 26 ),
    .CASE2( 32'h2 ),
    .din2_WIDTH( 26 ),
    .def_WIDTH( 26 ),
    .sel_WIDTH( 32 ),
    .dout_WIDTH( 26 ))
sparsemux_7_32_26_1_1_U16(
    .din0(26'd33620227),
    .din1(26'd16974337),
    .din2(26'd50462977),
    .def(26'd16843522),
    .sel(ib_fu_140_p8),
    .dout(ib_fu_140_p9)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_90 <= 3'd0;
        end else if (((icmp_ln49_fu_121_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_90 <= j_2_fu_127_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            pans_fu_94 <= 32'd0;
        end else if (((icmp_ln49_fu_121_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            pans_fu_94 <= pans_1_fu_540_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_16_reg_589 <= a_16_fu_104_p1;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_121_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_10_fu_355_p2 = (8'd27 ^ a_9_fu_340_p3);

assign a_11_fu_361_p3 = ((tmp_8_fu_348_p3[0:0] == 1'b1) ? a_10_fu_355_p2 : a_9_fu_340_p3);

assign a_13_fu_427_p3 = {{tmp_3_fu_418_p4}, {1'd0}};

assign a_14_fu_442_p2 = (8'd27 ^ a_13_fu_427_p3);

assign a_15_fu_448_p3 = ((tmp_10_fu_435_p3[0:0] == 1'b1) ? a_14_fu_442_p2 : a_13_fu_427_p3);

assign a_16_fu_104_p1 = ia[7:0];

assign a_17_fu_219_p4 = {{ia[15:8]}};

assign a_18_fu_306_p4 = {{ia[23:16]}};

assign a_19_fu_393_p4 = {{ia[31:24]}};

assign a_2_fu_189_p2 = (8'd27 ^ a_fu_174_p3);

assign a_3_fu_195_p3 = ((tmp_fu_182_p3[0:0] == 1'b1) ? a_2_fu_189_p2 : a_fu_174_p3);

assign a_5_fu_253_p3 = {{tmp_1_fu_244_p4}, {1'd0}};

assign a_6_fu_268_p2 = (8'd27 ^ a_5_fu_253_p3);

assign a_7_fu_274_p3 = ((tmp_6_fu_261_p3[0:0] == 1'b1) ? a_6_fu_268_p2 : a_5_fu_253_p3);

assign a_9_fu_340_p3 = {{tmp_2_fu_331_p4}, {1'd0}};

assign a_fu_174_p3 = {{trunc_ln68_fu_171_p1}, {1'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_return = pans_fu_94;

assign b_fu_402_p3 = ib_fu_140_p9[32'd24];

assign ib_fu_140_p8 = j_fu_90;

assign icmp_ln49_fu_121_p2 = ((j_fu_90 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_379_p2 = ((trunc_ln71_1_fu_369_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_292_p2 = ((trunc_ln1_fu_282_p4 != 7'd0) ? 1'b1 : 1'b0);

assign j_2_fu_127_p2 = (j_fu_90 + 3'd1);

assign oans_fu_508_p2 = (xor_ln74_5_fu_502_p2 ^ xor_ln74_2_fu_484_p2);

assign p_1_fu_164_p3 = ((trunc_ln60_fu_160_p1[0:0] == 1'b1) ? a_16_reg_589 : 8'd0);

assign p_3_fu_236_p3 = ((tmp_5_fu_228_p3[0:0] == 1'b1) ? a_17_fu_219_p4 : 8'd0);

assign p_5_fu_323_p3 = ((tmp_7_fu_315_p3[0:0] == 1'b1) ? a_18_fu_306_p4 : 8'd0);

assign p_7_fu_410_p3 = ((b_fu_402_p3[0:0] == 1'b1) ? a_19_fu_393_p4 : 8'd0);

assign pans_1_fu_540_p2 = (shl_ln76_fu_534_p2 | pans_fu_94);

assign select_ln65_2_fu_298_p3 = ((icmp_ln65_fu_292_p2[0:0] == 1'b1) ? a_7_fu_274_p3 : 8'd0);

assign select_ln65_4_fu_385_p3 = ((icmp_ln65_1_fu_379_p2[0:0] == 1'b1) ? a_11_fu_361_p3 : 8'd0);

assign select_ln65_6_fu_464_p3 = ((tmp_11_fu_456_p3[0:0] == 1'b1) ? a_15_fu_448_p3 : 8'd0);

assign select_ln65_fu_211_p3 = ((tmp_4_fu_203_p3[0:0] == 1'b1) ? a_3_fu_195_p3 : 8'd0);

assign shl_ln76_fu_534_p2 = zext_ln76_fu_514_p1 << zext_ln76_1_fu_530_p1;

assign shl_ln_fu_522_p3 = {{trunc_ln76_fu_518_p1}, {3'd0}};

assign tmp_10_fu_435_p3 = ia[32'd31];

assign tmp_11_fu_456_p3 = ib_fu_140_p9[32'd25];

assign tmp_1_fu_244_p4 = {{ia[14:8]}};

assign tmp_2_fu_331_p4 = {{ia[22:16]}};

assign tmp_3_fu_418_p4 = {{ia[30:24]}};

assign tmp_4_fu_203_p3 = ib_fu_140_p9[32'd1];

assign tmp_5_fu_228_p3 = ib_fu_140_p9[32'd8];

assign tmp_6_fu_261_p3 = ia[32'd15];

assign tmp_7_fu_315_p3 = ib_fu_140_p9[32'd16];

assign tmp_8_fu_348_p3 = ia[32'd23];

assign tmp_fu_182_p3 = ia[32'd7];

assign trunc_ln1_fu_282_p4 = {{ib_fu_140_p9[15:9]}};

assign trunc_ln60_fu_160_p1 = ib_fu_140_p9[0:0];

assign trunc_ln68_fu_171_p1 = ia[6:0];

assign trunc_ln71_1_fu_369_p4 = {{ib_fu_140_p9[23:17]}};

assign trunc_ln76_fu_518_p1 = j_fu_90[1:0];

assign xor_ln74_1_fu_478_p2 = (select_ln65_2_fu_298_p3 ^ p_1_fu_164_p3);

assign xor_ln74_2_fu_484_p2 = (xor_ln74_fu_472_p2 ^ xor_ln74_1_fu_478_p2);

assign xor_ln74_3_fu_496_p2 = (xor_ln74_4_fu_490_p2 ^ select_ln65_4_fu_385_p3);

assign xor_ln74_4_fu_490_p2 = (p_5_fu_323_p3 ^ p_3_fu_236_p3);

assign xor_ln74_5_fu_502_p2 = (xor_ln74_3_fu_496_p2 ^ p_7_fu_410_p3);

assign xor_ln74_fu_472_p2 = (select_ln65_fu_211_p3 ^ select_ln65_6_fu_464_p3);

assign zext_ln76_1_fu_530_p1 = shl_ln_fu_522_p3;

assign zext_ln76_fu_514_p1 = oans_fu_508_p2;

endmodule //TOP_gmul_s
